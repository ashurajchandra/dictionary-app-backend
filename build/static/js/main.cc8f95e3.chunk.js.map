{"version":3,"sources":["actions/actionTypes.js","helpers/url.js","helpers/utils.js","actions/Words.js","components/Navbar.js","components/Home.js","components/WordList.js","components/AddComponent.js","components/WordDetails.js","components/WordDescription.js","components/App.js","reducers/words.js","reducers/index.js","index.js","store/index.js"],"names":["UPDATE_WORDS","ADD_WORDS","SHOW_WORD_DETAILS","SHOW_WORD_LIST","API_ROOT","APIUrls","getFormBody","params","formBody","property","encodedKey","encodeURIComponent","encodedValue","push","join","getWords","dispatch","url","fetch","then","response","json","data","word","console","log","type","addWord","method","headers","body","addWordToStore","showWordDetails","singleWord","showWordList","Navbar","handleChange","e","setState","searchText","target","value","handleClick","props","state","this","words","filter","w","id","className","onChange","onClick","handleSearch","src","alt","length","map","Component","connect","Home","WordList","showDetails","index","AddComponent","handleAddClick","prompt","WordDetails","results","lexicalEntries","lexicalCategory","text","entries","senses","examples","WordDescription","language","App","intialState","combineReducers","action","store","createStore","reducer","applyMiddleware","thunk","logger","getState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cc8f95e3.chunk.js","sourcesContent":["// action types\nexport const UPDATE_WORDS = \"UPDATE_WORDS\";\nexport const ADD_WORDS = \"ADD_WORDS\";\nexport const SHOW_WORD_DETAILS = \"SHOW_WORD_DETAILS\";\nexport const SHOW_WORD_LIST = \"SHOW_WORD_LIST\";\n","const API_ROOT = \"http://localhost:8000/api/v1/word\"; //taking out the common part of api\n\nexport const APIUrls = {\n  // writing all the api's here\n  create: () => `${API_ROOT}/create`,\n  search: () => `${API_ROOT}/search`,\n  fetchWords: () => `${API_ROOT}/fetchWords`,\n};\n","export function getFormBody(params) {\n  let formBody = [];\n\n  for (let property in params) {\n    let encodedKey = encodeURIComponent(property);\n    let encodedValue = encodeURIComponent(params[property]);\n    formBody.push(encodedKey + \"=\" + encodedValue);\n  }\n  return formBody.join(\"&\");\n}\n","import {\n  UPDATE_WORDS,\n  ADD_WORDS,\n  SHOW_WORD_DETAILS,\n  SHOW_WORD_LIST,\n} from \"./actionTypes\";\nimport { APIUrls } from \"../helpers/url\";\nimport { getFormBody } from \"../helpers/utils\";\n\nexport function getWords() {\n  return (dispatch) => {\n    //hitting fetch api\n    const url = APIUrls.fetchWords();\n    fetch(url)\n      .then((response) => {\n        return response.json();\n      })\n      .then((data) => {\n        console.log(\"data\", data);\n        console.log(\"data.data\", data.data);\n        dispatch(updateWords(data.data));\n      });\n  };\n}\n\nexport function updateWords(word) {\n  return {\n    type: UPDATE_WORDS,\n    word,\n  };\n}\n\nexport function addWord(word) {\n  return (dispatch) => {\n    //hitting create api\n    const url = APIUrls.create();\n    fetch(url, {\n      //defining the type of api\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n      },\n      body: getFormBody({\n        word,\n      }),\n    })\n      .then((response) => {\n        return response.json();\n      })\n      .then((data) => {\n        dispatch(addWordToStore(data.data));\n      });\n  };\n}\n\nfunction addWordToStore(word) {\n  return {\n    type: ADD_WORDS,\n    word,\n  };\n}\n\nexport function showWordDetails(singleWord) {\n  return {\n    type: SHOW_WORD_DETAILS,\n    singleWord,\n  };\n}\n\nexport function showWordList() {\n  return {\n    type: SHOW_WORD_LIST,\n  };\n}\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { WordDescription } from \"./index\";\nimport { showWordDetails } from \"../actions/Words\";\nclass Navbar extends Component {\n  constructor() {\n    super();\n    this.state = {\n      searchText: \"\",\n    };\n  }\n  handleChange = (e) => {\n    //updating state with current typed value\n    this.setState({ searchText: e.target.value });\n  };\n\n  handleClick = (singleWord) => {\n    this.props.dispatch(showWordDetails(singleWord));\n  };\n\n  render() {\n    const { searchText } = this.state;\n    const { words } = this.props;\n\n    const word = words.filter((w) => w.id == searchText);\n\n    return (\n      <div>\n        <nav className=\"nav\">\n          <div className=\"left-div\">\n            <h2>Vocab</h2>\n          </div>\n          <div className=\"search-container\">\n            <input onChange={this.handleChange} />\n            <img\n              onClick={this.handleSearch}\n              className=\"search-icon\"\n              src=\"https://image.flaticon.com/icons/svg/483/483356.svg\"\n              alt=\"search-icon\"\n            />\n\n            {/* showing search results while typing the words in search box */}\n            {word.length > 0 && (\n              <div className=\"search-results\">\n                {word.map((singleWord) => (\n                  <div\n                    className=\"search-result\"\n                    onClick={() => this.handleClick(singleWord)}\n                  >\n                    {singleWord.word}\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        </nav>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    words: state.words.words,\n  };\n}\nexport default connect(mapStateToProps)(Navbar);\n","import React, { Component } from \"react\";\nimport { WordList } from \"./index\";\n\nclass Home extends Component {\n  render() {\n    console.log(\"props\", this.props);\n    const { words } = this.props;\n    return (\n      <div className=\"home-page\">\n        <WordList dispatch={this.props.dispatch} words={words} />\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { WordDescription, WordDetails, AddComponent } from \"./index\";\nclass WordList extends Component {\n  render() {\n    const { words } = this.props;\n    const { showDetails, singleWord } = this.props;\n\n    return (\n      <div>\n        {!showDetails && <h2>Words List</h2>}\n        {showDetails ? (\n          <WordDetails />\n        ) : (\n          <div>\n            {words.map((word, index) => (\n              <WordDescription\n                index={index}\n                word={word}\n                dispatch={this.props.dispatch}\n              />\n            ))}\n            <AddComponent dispatch={this.props.dispatch} />\n          </div>\n        )}\n      </div>\n    );\n  }\n}\nfunction mapStateToProps(state) {\n  return {\n    words: state.words.words,\n    singleWord: state.words.singleWord,\n    showDetails: state.words.showDetails,\n  };\n}\n\nexport default connect(mapStateToProps)(WordList);\n","import React, { Component } from \"react\";\nimport { addWord } from \"../actions/Words\";\n\nclass AddComponent extends Component {\n  handleAddClick = () => {\n    var word = prompt(\"Add To Dictionary\");\n    console.log(\"word\", word);\n    if (word != \"\") {\n      this.props.dispatch(addWord(word));\n    }\n  };\n  render() {\n    return (\n      <div className=\"add-button\">\n        <img\n          onClick={this.handleAddClick}\n          src=\"https://t4.ftcdn.net/jpg/01/26/10/59/240_F_126105961_6vHCTRX2cPOnQTBvx9OSAwRUapYTEmYA.jpg\"\n          alt=\"add-word\"\n        />\n      </div>\n    );\n  }\n}\n\nexport default AddComponent;\n","import React, { Component } from \"react\";\nimport { showWordList } from \"../actions/Words\";\nimport { connect } from \"react-redux\";\nclass WordDetails extends Component {\n  handleClick = () => {\n    this.props.dispatch(showWordList());\n  };\n  render() {\n    const { singleWord } = this.props;\n\n    return (\n      <div className=\"single-word-details-page\">\n        <img\n          src=\"https://t3.ftcdn.net/jpg/03/11/74/34/240_F_311743449_H2xbYofvYIrhjLC8xIm2fq7oAPXasPFz.jpg\"\n          alt=\"close-button\"\n          onClick={this.handleClick}\n        />\n        <div className=\"word-title\">{singleWord.word}</div>\n        <div>\n          {singleWord.results[0].lexicalEntries[0].lexicalCategory.text}\n        </div>\n\n        <div>\n          {\n            singleWord.results[0].lexicalEntries[0].entries[0].senses[0]\n              .examples[0].text\n          }\n        </div>\n      </div>\n    );\n  }\n}\nfunction mapStateToProps(state) {\n  return {\n    singleWord: state.words.singleWord,\n  };\n}\nexport default connect(mapStateToProps)(WordDetails);\n","import React, { Component } from \"react\";\nimport { showWordDetails } from \"../actions/Words\";\n\nclass WordDescription extends Component {\n  handleClick = () => {\n    const { word } = this.props;\n    this.props.dispatch(showWordDetails(word));\n  };\n\n  render() {\n    const { word, index } = this.props;\n\n    return (\n      <div className=\"words-list\">\n        <div onClick={this.handleClick}>\n          <div className=\"word-title\">{word.word}</div>\n          <div>{word.results[0].lexicalEntries[0].lexicalCategory.text}</div>\n          <div>{word.results[0].language}</div>\n          <div>\n            {\n              word.results[0].lexicalEntries[0].entries[0].senses[0].examples[0]\n                .text\n            }\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default WordDescription;\n","import React, { Component } from \"react\";\nimport { Navbar, Home } from \"./index\";\n// import { BrowserRouter as Router } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { getWords } from \"../actions/Words\";\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.dispatch(getWords());\n  }\n  render() {\n    console.log(\"props\", this.props);\n    const { words } = this.props;\n    return (\n      // <Router>\n      <div>\n        <Navbar words={words} dispatch={this.props.dispatch} />\n        <Home words={words} dispatch={this.props.dispatch} />\n        {/* <AddComponent dispatch={this.props.dispatch} /> */}\n      </div>\n      // </Router>\n    );\n  }\n}\nfunction mapStateToProps(state) {\n  console.log(\"in app\", state);\n  return {\n    words: state.words.words,\n  };\n}\n\nexport default connect(mapStateToProps)(App);\n","import {\n  UPDATE_WORDS,\n  ADD_WORDS,\n  SHOW_WORD_DETAILS,\n  SHOW_WORD_LIST,\n} from \"../actions/actionTypes\";\n\nconst intialState = {\n  words: [],\n  singleWord: \"\",\n  showDetails: false,\n};\nexport default function wordUpdate(state = intialState, action) {\n  switch (action.type) {\n    case UPDATE_WORDS:\n      return {\n        ...state,\n        words: action.word,\n      };\n\n    case ADD_WORDS:\n      return {\n        ...state,\n        words: [...state.words, action.word],\n      };\n    case SHOW_WORD_DETAILS:\n      return {\n        ...state,\n        singleWord: action.singleWord,\n        showDetails: true,\n      };\n\n    case SHOW_WORD_LIST:\n      return {\n        ...state,\n        showDetails: false,\n      };\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from \"redux\";\nimport words from \"./words\";\n\nexport default combineReducers({\n  words,\n});\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport { configureStore } from \"./store/index\";\nimport { Provider } from \"react-redux\";\n\n//importing configureStore() from store folder\nconst store = configureStore();\nconsole.log(\"store\", store);\nconsole.log(\"store\", store.getState());\n\nReactDOM.render(\n  //passing store as a props\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n","import { createStore, applyMiddleware } from \"redux\";\nimport reducer from \"../reducers\";\nimport thunk from \"redux-thunk\";\nimport logger from \"redux-logger\";\n\nlet store;\nexport function configureStore() {\n  //using createStore from redux\n  store = createStore(reducer, applyMiddleware(thunk, logger));\n  return store;\n}\n"],"sourceRoot":""}